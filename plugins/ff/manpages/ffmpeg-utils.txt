FFMPEG-UTILS(1) 															  FFMPEG-UTILS(1)



NAME
       ffmpeg-utils - FFmpeg utilities

DESCRIPTION
       This document describes some generic features and utilities provided by the libavutil library.

SYNTAX
       This section documents the syntax and formats employed by the FFmpeg libraries and tools.

   Quoting and escaping
       FFmpeg adopts the following quoting and escaping mechanism, unless explicitly specified. The following rules are applied:

       ·   "'" and "\" are special characters (respectively used for quoting and escaping). In addition to them, there might be other special characters
	   depending on the specific syntax where the escaping and quoting are employed.

       ·   A special character is escaped by prefixing it with a '\'.

       ·   All characters enclosed between '' are included literally in the parsed string. The quote character "'" itself cannot be quoted, so you may
	   need to close the quote and escape it.

       ·   Leading and trailing whitespaces, unless escaped or quoted, are removed from the parsed string.

       Note that you may need to add a second level of escaping when using the command line or a script, which depends on the syntax of the adopted shell
       language.

       The function "av_get_token" defined in libavutil/avstring.h can be used to parse a token quoted or escaped according to the rules defined above.

       The tool tools/ffescape in the FFmpeg source tree can be used to automatically quote or escape a string in a script.

       Examples

       ·   Escape the string "Crime d'Amour" containing the "'" special character:

		   Crime d\'Amour

       ·   The string above contains a quote, so the "'" needs to be escaped when quoting it:

		   'Crime d'\''Amour'

       ·   Include leading or trailing whitespaces using quoting:

		   '  this string starts and ends with whitespaces  '

       ·   Escaping and quoting can be mixed together:

		   ' The string '\'string\'' is a string '

       ·   To include a literal "\" you can use either escaping or quoting:

		   'c:\foo' can be written as c:\\foo

   Date
       The accepted syntax is:

	       [(YYYY-MM-DD|YYYYMMDD)[T|t| ]]((HH:MM:SS[.m...]]])|(HHMMSS[.m...]]]))[Z]
	       now

       If the value is "now" it takes the current time.

       Time is local time unless Z is appended, in which case it is interpreted as UTC.  If the year-month-day part is not specified it takes the current
       year-month-day.

   Time duration
       The accepted syntax is:

	       [-][HH:]MM:SS[.m...]
	       [-]S+[.m...]

       HH expresses the number of hours, MM the number a of minutes and SS the number of seconds.

   Video size
       Specify the size of the sourced video, it may be a string of the form widthxheight, or the name of a size abbreviation.

       The following abbreviations are recognized:

       ntsc
	   720x480

       pal 720x576

       qntsc
	   352x240

       qpal
	   352x288

       sntsc
	   640x480

       spal
	   768x576

       film
	   352x240

       ntsc-film
	   352x240

       sqcif
	   128x96

       qcif
	   176x144

       cif 352x288

       4cif
	   704x576

       16cif
	   1408x1152

       qqvga
	   160x120

       qvga
	   320x240

       vga 640x480

       svga
	   800x600

       xga 1024x768

       uxga
	   1600x1200

       qxga
	   2048x1536

       sxga
	   1280x1024

       qsxga
	   2560x2048

       hsxga
	   5120x4096

       wvga
	   852x480

       wxga
	   1366x768

       wsxga
	   1600x1024

       wuxga
	   1920x1200

       woxga
	   2560x1600

       wqsxga
	   3200x2048

       wquxga
	   3840x2400

       whsxga
	   6400x4096

       whuxga
	   7680x4800

       cga 320x200

       ega 640x350

       hd480
	   852x480

       hd720
	   1280x720

       hd1080
	   1920x1080

       2k  2048x1080

       2kflat
	   1998x1080

       2kscope
	   2048x858

       4k  4096x2160

       4kflat
	   3996x2160

       4kscope
	   4096x1716

   Video rate
       Specify the frame rate of a video, expressed as the number of frames generated per second. It has to be a string in the format
       frame_rate_num/frame_rate_den, an integer number, a float number or a valid video frame rate abbreviation.

       The following abbreviations are recognized:

       ntsc
	   30000/1001

       pal 25/1

       qntsc
	   30000/1001

       qpal
	   25/1

       sntsc
	   30000/1001

       spal
	   25/1

       film
	   24/1

       ntsc-film
	   24000/1001

   Ratio
       A ratio can be expressed as an expression, or in the form numerator:denominator.

       Note that a ratio with infinite (1/0) or negative value is considered valid, so you should check on the returned value if you want to exclude
       those values.

       The undefined value can be expressed using the "0:0" string.

   Color
       It can be the name of a color (case insensitive match) or a [0x|#]RRGGBB[AA] sequence, possibly followed by "@" and a string representing the
       alpha component.

       The alpha component may be a string composed by "0x" followed by an hexadecimal number or a decimal number between 0.0 and 1.0, which represents
       the opacity value (0x00/0.0 means completely transparent, 0xff/1.0 completely opaque).  If the alpha component is not specified then 0xff is
       assumed.

       The string "random" will result in a random color.

EXPRESSION EVALUATION
       When evaluating an arithmetic expression, FFmpeg uses an internal formula evaluator, implemented through the libavutil/eval.h interface.

       An expression may contain unary, binary operators, constants, and functions.

       Two expressions expr1 and expr2 can be combined to form another expression "expr1;expr2".  expr1 and expr2 are evaluated in turn, and the new
       expression evaluates to the value of expr2.

       The following binary operators are available: "+", "-", "*", "/", "^".

       The following unary operators are available: "+", "-".

       The following functions are available:

       abs(x)
	   Compute absolute value of x.

       acos(x)
	   Compute arccosine of x.

       asin(x)
	   Compute arcsine of x.

       atan(x)
	   Compute arctangent of x.

       between(x, min, max)
	   Return 1 if x is greater than or equal to min and lesser than or equal to max, 0 otherwise.

       bitand(x, y)
       bitor(x, y)
	   Compute bitwise and/or operation on x and y.

	   The results of the evaluation of x and y are converted to integers before executing the bitwise operation.

	   Note that both the conversion to integer and the conversion back to floating point can lose precision. Beware of unexpected results for large
	   numbers (usually 2^53 and larger).

       ceil(expr)
	   Round the value of expression expr upwards to the nearest integer. For example, "ceil(1.5)" is "2.0".

       cos(x)
	   Compute cosine of x.

       cosh(x)
	   Compute hyperbolic cosine of x.

       eq(x, y)
	   Return 1 if x and y are equivalent, 0 otherwise.

       exp(x)
	   Compute exponential of x (with base "e", the Euler's number).

       floor(expr)
	   Round the value of expression expr downwards to the nearest integer. For example, "floor(-1.5)" is "-2.0".

       gauss(x)
	   Compute Gauss function of x, corresponding to "exp(-x*x/2) / sqrt(2*PI)".

       gcd(x, y)
	   Return the greatest common divisor of x and y. If both x and y are 0 or either or both are less than zero then behavior is undefined.

       gt(x, y)
	   Return 1 if x is greater than y, 0 otherwise.

       gte(x, y)
	   Return 1 if x is greater than or equal to y, 0 otherwise.

       hypot(x, y)
	   This function is similar to the C function with the same name; it returns "sqrt(x*x + y*y)", the length of the hypotenuse of a right triangle
	   with sides of length x and y, or the distance of the point (x, y) from the origin.

       if(x, y)
	   Evaluate x, and if the result is non-zero return the result of the evaluation of y, return 0 otherwise.

       if(x, y, z)
	   Evaluate x, and if the result is non-zero return the evaluation result of y, otherwise the evaluation result of z.

       ifnot(x, y)
	   Evaluate x, and if the result is zero return the result of the evaluation of y, return 0 otherwise.

       ifnot(x, y, z)
	   Evaluate x, and if the result is zero return the evaluation result of y, otherwise the evaluation result of z.

       isinf(x)
	   Return 1.0 if x is +/-INFINITY, 0.0 otherwise.

       isnan(x)
	   Return 1.0 if x is NAN, 0.0 otherwise.

       ld(var)
	   Allow to load the value of the internal variable with number var, which was previously stored with st(var, expr).  The function returns the
	   loaded value.

       log(x)
	   Compute natural logarithm of x.

       lt(x, y)
	   Return 1 if x is lesser than y, 0 otherwise.

       lte(x, y)
	   Return 1 if x is lesser than or equal to y, 0 otherwise.

       max(x, y)
	   Return the maximum between x and y.

       min(x, y)
	   Return the maximum between x and y.

       mod(x, y)
	   Compute the remainder of division of x by y.

       not(expr)
	   Return 1.0 if expr is zero, 0.0 otherwise.

       pow(x, y)
	   Compute the power of x elevated y, it is equivalent to "(x)^(y)".

       print(t)
       print(t, l)
	   Print the value of expression t with loglevel l. If l is not specified then a default log level is used.  Returns the value of the expression
	   printed.

	   Prints t with loglevel l

       random(x)
	   Return a pseudo random value between 0.0 and 1.0. x is the index of the internal variable which will be used to save the seed/state.

       root(expr, max)
	   Find an input value for which the function represented by expr with argument ld(0) is 0 in the interval 0..max.

	   The expression in expr must denote a continuous function or the result is undefined.

	   ld(0) is used to represent the function input value, which means that the given expression will be evaluated multiple times with various input
	   values that the expression can access through ld(0). When the expression evaluates to 0 then the corresponding input value will be returned.

       sin(x)
	   Compute sine of x.

       sinh(x)
	   Compute hyperbolic sine of x.

       sqrt(expr)
	   Compute the square root of expr. This is equivalent to "(expr)^.5".

       squish(x)
	   Compute expression "1/(1 + exp(4*x))".

       st(var, expr)
	   Allow to store the value of the expression expr in an internal variable. var specifies the number of the variable where to store the value,
	   and it is a value ranging from 0 to 9. The function returns the value stored in the internal variable.  Note, Variables are currently not
	   shared between expressions.

       tan(x)
	   Compute tangent of x.

       tanh(x)
	   Compute hyperbolic tangent of x.

       taylor(expr, x)
       taylor(expr, x, id)
	   Evaluate a Taylor series at x, given an expression representing the "ld(id)"-th derivative of a function at 0.

	   When the series does not converge the result is undefined.

	   ld(id) is used to represent the derivative order in expr, which means that the given expression will be evaluated multiple times with various
	   input values that the expression can access through "ld(id)". If id is not specified then 0 is assumed.

	   Note, when you have the derivatives at y instead of 0, "taylor(expr, x-y)" can be used.

       time(0)
	   Return the current (wallclock) time in seconds.

       trunc(expr)
	   Round the value of expression expr towards zero to the nearest integer. For example, "trunc(-1.5)" is "-1.0".

       while(cond, expr)
	   Evaluate expression expr while the expression cond is non-zero, and returns the value of the last expr evaluation, or NAN if cond was always
	   false.

       The following constants are available:

       PI  area of the unit disc, approximately 3.14

       E   exp(1) (Euler's number), approximately 2.718

       PHI golden ratio (1+sqrt(5))/2, approximately 1.618

       Assuming that an expression is considered "true" if it has a non-zero value, note that:

       "*" works like AND

       "+" works like OR

       For example the construct:

	       if (A AND B) then C

       is equivalent to:

	       if(A*B, C)

       In your C code, you can extend the list of unary and binary functions, and define recognized constants, so that they are available for your
       expressions.

       The evaluator also recognizes the International System unit prefixes.  If 'i' is appended after the prefix, binary prefixes are used, which are
       based on powers of 1024 instead of powers of 1000.  The 'B' postfix multiplies the value by 8, and can be appended after a unit prefix or used
       alone. This allows using for example 'KB', 'MiB', 'G' and 'B' as number postfix.

       The list of available International System prefixes follows, with indication of the corresponding powers of 10 and of 2.

       y   10^-24 / 2^-80

       z   10^-21 / 2^-70

       a   10^-18 / 2^-60

       f   10^-15 / 2^-50

       p   10^-12 / 2^-40

       n   10^-9 / 2^-30

       u   10^-6 / 2^-20

       m   10^-3 / 2^-10

       c   10^-2

       d   10^-1

       h   10^2

       k   10^3 / 2^10

       K   10^3 / 2^10

       M   10^6 / 2^20

       G   10^9 / 2^30

       T   10^12 / 2^40

       P   10^15 / 2^40

       E   10^18 / 2^50

       Z   10^21 / 2^60

       Y   10^24 / 2^70

OPENCL OPTIONS
       When FFmpeg is configured with "--enable-opencl", it is possible to set the options for the global OpenCL context.

       The list of supported options follows:

       build_options
	   Set build options used to compile the registered kernels.

	   See reference "OpenCL Specification Version: 1.2 chapter 5.6.4".

       platform_idx
	   Select the index of the platform to run OpenCL code.

	   The specified index must be one of the indexes in the device list which can be obtained with "av_opencl_get_device_list()".

       device_idx
	   Select the index of the device used to run OpenCL code.

	   The specifed index must be one of the indexes in the device list which can be obtained with "av_opencl_get_device_list()".

SEE ALSO
       ffmpeg(1), ffplay(1), ffprobe(1), ffserver(1), libavutil(3)

AUTHORS
       The FFmpeg developers.

       For details about the authorship, see the Git history of the project (git://source.ffmpeg.org/ffmpeg), e.g. by typing the command git log in the
       FFmpeg source directory, or browsing the online repository at <http://source.ffmpeg.org>.

       Maintainers for the specific components are listed in the file MAINTAINERS in the source code tree.



									2013-09-24							  FFMPEG-UTILS(1)
